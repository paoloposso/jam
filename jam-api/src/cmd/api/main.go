package main

import (
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/paoloposso/jam/src/auth"
	"github.com/paoloposso/jam/src/cmd/api/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/paoloposso/jam/src/cmd/api/handlers"
	"github.com/paoloposso/jam/src/core/customerrors"
	authrepo "github.com/paoloposso/jam/src/infrastructure/dynamodb/auth"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// HealthCheck godoc
// @Summary Show the status of server.
// @Description get the status of server.
// @Tags root
// @Accept */*
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Router / [get]
func HealthCheck(c *gin.Context) {
	res := map[string]interface{}{
		"data": "Server is up and running",
	}

	c.JSON(http.StatusOK, res)
}

func LoginHandler(c *gin.Context) {
	var req handlers.AuthRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	if repo, err := authrepo.NewRepository(); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	} else {
		service := auth.NewService(repo)
		user, err := service.Authenticate(req.Email, req.Password)

		if err != nil {
			handleHttpError(c, err)
			return
		}
		c.IndentedJSON(http.StatusOK, handlers.AuthResponse{Token: user.Token})
	}
}

func handleHttpError(c *gin.Context, err error) {
	e := gin.H{"error": err.Error()}

	switch err.(type) {
	case *customerrors.UnauthorizedError:
		c.IndentedJSON(http.StatusUnauthorized, e)
		return
	default:
		c.IndentedJSON(http.StatusInternalServerError, e)
		return
	}
}

// @contact.name   Paolo Posso
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html
func main() {
	docs.SwaggerInfo.Title = "Jam API"
	docs.SwaggerInfo.Description = "Jam API."
	docs.SwaggerInfo.Version = "1.0"
	docs.SwaggerInfo.Host = "jam.swagger.io"
	docs.SwaggerInfo.BasePath = "/v1"
	docs.SwaggerInfo.Schemes = []string{"http", "https"}

	router := gin.Default()
	router.POST("/v1/auth", LoginHandler)
	router.GET("/", HealthCheck)

	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Start server
	if err := router.Run(":8080"); err != nil {
		log.Fatal(err)
	}
}
